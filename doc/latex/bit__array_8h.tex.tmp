\hypertarget{bit__array_8h}{}\doxysection{src/bit\+\_\+array.h File Reference}
\label{bit__array_8h}\index{src/bit\_array.h@{src/bit\_array.h}}


\doxysubsection{Detailed Description}
A variable length array of bits and functions to manipulate it. 

{\ttfamily \#include $<$stdbool.\+h$>$}\newline
{\ttfamily \#include $<$stddef.\+h$>$}\newline
Include dependency graph for bit\+\_\+array.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structBitArray}{Bit\+Array}}
\begin{DoxyCompactList}\small\item\em The structure of a variable length array of bits. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{Indent}\textbf{ Creation and destruction functions}\par
{\em Functions to create and destroy a \mbox{\hyperlink{structBitArray}{Bit\+Array}}. }\begin{DoxyCompactItemize}
\item 
\mbox{\hyperlink{structBitArray}{Bit\+Array}} \mbox{\hyperlink{bit__array_8h_a6c47f74244006ff431a64e98daf3652e}{Bit\+Array\+\_\+with\+\_\+n\+\_\+bits}} (size\+\_\+t nb\+\_\+bits)
\begin{DoxyCompactList}\small\item\em Creates a \mbox{\hyperlink{structBitArray}{Bit\+Array}} with the given number of bits. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structBitArray}{Bit\+Array}} \mbox{\hyperlink{bit__array_8h_a7fdee2546d1251aea06cd5b07f0ffb1d}{Bit\+Array\+\_\+n\+\_\+zeros}} (size\+\_\+t nb\+\_\+bits)
\item 
\mbox{\hyperlink{structBitArray}{Bit\+Array}} \mbox{\hyperlink{bit__array_8h_aba66285d6c98067bbaa9585cbdde4683}{Bit\+Array\+\_\+n\+\_\+ones}} (size\+\_\+t nb\+\_\+bits)
\item 
void \mbox{\hyperlink{bit__array_8h_a786300f4984391a7139863cd38b09b3b}{Bit\+Array\+\_\+destroy}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array)
\begin{DoxyCompactList}\small\item\em Destroys the given \mbox{\hyperlink{structBitArray}{Bit\+Array}}. \end{DoxyCompactList}\end{DoxyCompactItemize}
\end{Indent}
\begin{Indent}\textbf{ Bit getters}\par
{\em Functions to get the value of a bit in the \mbox{\hyperlink{structBitArray}{Bit\+Array}}. }\begin{DoxyCompactItemize}
\item 
bool \mbox{\hyperlink{bit__array_8h_a414eeef9d566db7a3e74cabdbb5c7653}{Bit\+Array\+\_\+is\+\_\+one}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array, size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Returns whether the bit at the given index is 1. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{bit__array_8h_ac2c3e6a5d6a1c717f1c59d53f34d522e}{Bit\+Array\+\_\+is\+\_\+zero}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array, size\+\_\+t index)
\end{DoxyCompactItemize}
\end{Indent}
\begin{Indent}\textbf{ Bit setters and operations}\par
{\em Allows you to do any operation on a single bit, like the bitwise operations or setting the bit to 1 or 0. They all modify the \mbox{\hyperlink{structBitArray}{Bit\+Array}} in place. }\begin{DoxyCompactItemize}
\item 
void \mbox{\hyperlink{bit__array_8h_ac22e1d66f71b26493412050ee0262fe3}{Bit\+Array\+\_\+set\+\_\+one}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array, size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Sets the bit at the given index to 1. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{bit__array_8h_a2f5eb4a58ab7ebcff680edec5582f2b7}{Bit\+Array\+\_\+set\+\_\+zero}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array, size\+\_\+t index)
\item 
void \mbox{\hyperlink{bit__array_8h_a0a6b465196254ea81c9bfa809a687a4f}{Bit\+Array\+\_\+all\+\_\+to\+\_\+one}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array)
\begin{DoxyCompactList}\small\item\em Sets all the bits in the \mbox{\hyperlink{structBitArray}{Bit\+Array}} to 1. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{bit__array_8h_a3de4906a9ce0ca8128315b5df0413c67}{Bit\+Array\+\_\+all\+\_\+to\+\_\+zero}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array)
\item 
void \mbox{\hyperlink{bit__array_8h_a8ea9e97257dc75decba1cc58f505af32}{Bit\+Array\+\_\+and\+\_\+bit}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array, size\+\_\+t index, int value)
\begin{DoxyCompactList}\small\item\em Performs a bitwise and with the bit at the given index. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{bit__array_8h_a7512d496479cd9f3d1cc93afcf0e300d}{Bit\+Array\+\_\+or\+\_\+bit}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array, size\+\_\+t index, int value)
\end{DoxyCompactItemize}
\end{Indent}
\begin{Indent}\textbf{ Bit\+Array operations}\par
{\em Allows you to do any bitwise operation on two Bit\+Arrays like you would do with integers. }\begin{DoxyCompactItemize}
\item 
\mbox{\hyperlink{structBitArray}{Bit\+Array}} \mbox{\hyperlink{bit__array_8h_aba8bf5561d8be0acfe2e9dce86575c7e}{Bit\+Array\+\_\+and\+\_\+array}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array1, \mbox{\hyperlink{structBitArray}{Bit\+Array}} array2)
\begin{DoxyCompactList}\small\item\em Performs a bitwise and between two Bit\+Arrays. \end{DoxyCompactList}\item 
\mbox{\hyperlink{structBitArray}{Bit\+Array}} \mbox{\hyperlink{bit__array_8h_a3496c7206b2733791428180a23381201}{Bit\+Array\+\_\+or\+\_\+array}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array1, \mbox{\hyperlink{structBitArray}{Bit\+Array}} array2)
\item 
size\+\_\+t \mbox{\hyperlink{bit__array_8h_ae336bb24993e5ba5cd864eaf5acec4db}{Bit\+Array\+\_\+leading\+\_\+zeros\+\_\+from}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array, size\+\_\+t index)
\begin{DoxyCompactList}\small\item\em Returns the number of leading zeros in the \mbox{\hyperlink{structBitArray}{Bit\+Array}} starting from the given index. \end{DoxyCompactList}\end{DoxyCompactItemize}
\end{Indent}
\begin{Indent}\textbf{ Miscellanous functions}\par
\begin{DoxyCompactItemize}
\item 
char $\ast$ \mbox{\hyperlink{bit__array_8h_a0db413990df11cb80b2893c42142f3f4}{Bit\+Array\+\_\+to\+\_\+string}} (\mbox{\hyperlink{structBitArray}{Bit\+Array}} array)
\begin{DoxyCompactList}\small\item\em Converts the \mbox{\hyperlink{structBitArray}{Bit\+Array}} to a string. \end{DoxyCompactList}\end{DoxyCompactItemize}
\end{Indent}


\doxysubsection{Function Documentation}
\mbox{\Hypertarget{bit__array_8h_a0a6b465196254ea81c9bfa809a687a4f}\label{bit__array_8h_a0a6b465196254ea81c9bfa809a687a4f}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_all\_to\_one@{BitArray\_all\_to\_one}}
\index{BitArray\_all\_to\_one@{BitArray\_all\_to\_one}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_all\_to\_one()}{BitArray\_all\_to\_one()}}
{\footnotesize\ttfamily void Bit\+Array\+\_\+all\+\_\+to\+\_\+one (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array }\end{DoxyParamCaption})}



Sets all the bits in the \mbox{\hyperlink{structBitArray}{Bit\+Array}} to 1. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in,out}}  & {\em array} & The \mbox{\hyperlink{structBitArray}{Bit\+Array}}. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{bit__array_8h_a3de4906a9ce0ca8128315b5df0413c67}\label{bit__array_8h_a3de4906a9ce0ca8128315b5df0413c67}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_all\_to\_zero@{BitArray\_all\_to\_zero}}
\index{BitArray\_all\_to\_zero@{BitArray\_all\_to\_zero}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_all\_to\_zero()}{BitArray\_all\_to\_zero()}}
{\footnotesize\ttfamily void Bit\+Array\+\_\+all\+\_\+to\+\_\+zero (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array }\end{DoxyParamCaption})}

Like Bit\+Array\+\_\+set\+\_\+all\+\_\+ones but sets all the bits to 0. \mbox{\Hypertarget{bit__array_8h_aba8bf5561d8be0acfe2e9dce86575c7e}\label{bit__array_8h_aba8bf5561d8be0acfe2e9dce86575c7e}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_and\_array@{BitArray\_and\_array}}
\index{BitArray\_and\_array@{BitArray\_and\_array}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_and\_array()}{BitArray\_and\_array()}}
{\footnotesize\ttfamily \mbox{\hyperlink{structBitArray}{Bit\+Array}} Bit\+Array\+\_\+and\+\_\+array (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array1,  }\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array2 }\end{DoxyParamCaption})}



Performs a bitwise and between two Bit\+Arrays. 

The two Bit\+Arrays must have the same number of bits. It creates a new \mbox{\hyperlink{structBitArray}{Bit\+Array}}, and therefore must be freed with Bit\+Array\+\_\+destroy afterwards. 
\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em array1} & The first \mbox{\hyperlink{structBitArray}{Bit\+Array}}. \\
\hline
\mbox{\texttt{ in}}  & {\em array2} & The second \mbox{\hyperlink{structBitArray}{Bit\+Array}}. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The \mbox{\hyperlink{structBitArray}{Bit\+Array}} resulting from the bitwise and. 
\end{DoxyReturn}
\mbox{\Hypertarget{bit__array_8h_a8ea9e97257dc75decba1cc58f505af32}\label{bit__array_8h_a8ea9e97257dc75decba1cc58f505af32}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_and\_bit@{BitArray\_and\_bit}}
\index{BitArray\_and\_bit@{BitArray\_and\_bit}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_and\_bit()}{BitArray\_and\_bit()}}
{\footnotesize\ttfamily void Bit\+Array\+\_\+and\+\_\+bit (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array,  }\item[{size\+\_\+t}]{index,  }\item[{int}]{value }\end{DoxyParamCaption})}



Performs a bitwise and with the bit at the given index. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in,out}}  & {\em array} & The \mbox{\hyperlink{structBitArray}{Bit\+Array}}. \\
\hline
\mbox{\texttt{ in}}  & {\em index} & The index of the bit. \\
\hline
\mbox{\texttt{ in}}  & {\em value} & The value to and with the bit. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{bit__array_8h_a786300f4984391a7139863cd38b09b3b}\label{bit__array_8h_a786300f4984391a7139863cd38b09b3b}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_destroy@{BitArray\_destroy}}
\index{BitArray\_destroy@{BitArray\_destroy}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_destroy()}{BitArray\_destroy()}}
{\footnotesize\ttfamily void Bit\+Array\+\_\+destroy (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array }\end{DoxyParamCaption})}



Destroys the given \mbox{\hyperlink{structBitArray}{Bit\+Array}}. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em array} & The \mbox{\hyperlink{structBitArray}{Bit\+Array}} to destroy. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{bit__array_8h_a414eeef9d566db7a3e74cabdbb5c7653}\label{bit__array_8h_a414eeef9d566db7a3e74cabdbb5c7653}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_is\_one@{BitArray\_is\_one}}
\index{BitArray\_is\_one@{BitArray\_is\_one}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_is\_one()}{BitArray\_is\_one()}}
{\footnotesize\ttfamily bool Bit\+Array\+\_\+is\+\_\+one (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}



Returns whether the bit at the given index is 1. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em array} & The \mbox{\hyperlink{structBitArray}{Bit\+Array}}. \\
\hline
\mbox{\texttt{ in}}  & {\em index} & The index of the bit. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Whether the bit at the given index is 1. 
\end{DoxyReturn}
\mbox{\Hypertarget{bit__array_8h_ac2c3e6a5d6a1c717f1c59d53f34d522e}\label{bit__array_8h_ac2c3e6a5d6a1c717f1c59d53f34d522e}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_is\_zero@{BitArray\_is\_zero}}
\index{BitArray\_is\_zero@{BitArray\_is\_zero}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_is\_zero()}{BitArray\_is\_zero()}}
{\footnotesize\ttfamily bool Bit\+Array\+\_\+is\+\_\+zero (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}

Like Bit\+Array\+\_\+is\+\_\+one but returns whether the bit is 0. \mbox{\Hypertarget{bit__array_8h_ae336bb24993e5ba5cd864eaf5acec4db}\label{bit__array_8h_ae336bb24993e5ba5cd864eaf5acec4db}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_leading\_zeros\_from@{BitArray\_leading\_zeros\_from}}
\index{BitArray\_leading\_zeros\_from@{BitArray\_leading\_zeros\_from}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_leading\_zeros\_from()}{BitArray\_leading\_zeros\_from()}}
{\footnotesize\ttfamily size\+\_\+t Bit\+Array\+\_\+leading\+\_\+zeros\+\_\+from (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}



Returns the number of leading zeros in the \mbox{\hyperlink{structBitArray}{Bit\+Array}} starting from the given index. 

Leading zeros means the number of zeros before the next 1. 
\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em array} & The \mbox{\hyperlink{structBitArray}{Bit\+Array}}. \\
\hline
\mbox{\texttt{ in}}  & {\em index} & The index to start from. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The number of leading zeros. 
\end{DoxyReturn}
\mbox{\Hypertarget{bit__array_8h_aba66285d6c98067bbaa9585cbdde4683}\label{bit__array_8h_aba66285d6c98067bbaa9585cbdde4683}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_n\_ones@{BitArray\_n\_ones}}
\index{BitArray\_n\_ones@{BitArray\_n\_ones}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_n\_ones()}{BitArray\_n\_ones()}}
{\footnotesize\ttfamily \mbox{\hyperlink{structBitArray}{Bit\+Array}} Bit\+Array\+\_\+n\+\_\+ones (\begin{DoxyParamCaption}\item[{size\+\_\+t}]{nb\+\_\+bits }\end{DoxyParamCaption})}

Like Bit\+Array\+\_\+with\+\_\+n\+\_\+bits but initializes the bits to 1. \mbox{\Hypertarget{bit__array_8h_a7fdee2546d1251aea06cd5b07f0ffb1d}\label{bit__array_8h_a7fdee2546d1251aea06cd5b07f0ffb1d}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_n\_zeros@{BitArray\_n\_zeros}}
\index{BitArray\_n\_zeros@{BitArray\_n\_zeros}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_n\_zeros()}{BitArray\_n\_zeros()}}
{\footnotesize\ttfamily \mbox{\hyperlink{structBitArray}{Bit\+Array}} Bit\+Array\+\_\+n\+\_\+zeros (\begin{DoxyParamCaption}\item[{size\+\_\+t}]{nb\+\_\+bits }\end{DoxyParamCaption})}

Like Bit\+Array\+\_\+with\+\_\+n\+\_\+bits but initializes the bits to 0. \mbox{\Hypertarget{bit__array_8h_a3496c7206b2733791428180a23381201}\label{bit__array_8h_a3496c7206b2733791428180a23381201}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_or\_array@{BitArray\_or\_array}}
\index{BitArray\_or\_array@{BitArray\_or\_array}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_or\_array()}{BitArray\_or\_array()}}
{\footnotesize\ttfamily \mbox{\hyperlink{structBitArray}{Bit\+Array}} Bit\+Array\+\_\+or\+\_\+array (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array1,  }\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array2 }\end{DoxyParamCaption})}

Like Bit\+Array\+\_\+and\+\_\+array but performs a bitwise or. \mbox{\Hypertarget{bit__array_8h_a7512d496479cd9f3d1cc93afcf0e300d}\label{bit__array_8h_a7512d496479cd9f3d1cc93afcf0e300d}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_or\_bit@{BitArray\_or\_bit}}
\index{BitArray\_or\_bit@{BitArray\_or\_bit}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_or\_bit()}{BitArray\_or\_bit()}}
{\footnotesize\ttfamily void Bit\+Array\+\_\+or\+\_\+bit (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array,  }\item[{size\+\_\+t}]{index,  }\item[{int}]{value }\end{DoxyParamCaption})}

Like Bit\+Array\+\_\+and\+\_\+bit but performs a bitwise or. \mbox{\Hypertarget{bit__array_8h_ac22e1d66f71b26493412050ee0262fe3}\label{bit__array_8h_ac22e1d66f71b26493412050ee0262fe3}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_set\_one@{BitArray\_set\_one}}
\index{BitArray\_set\_one@{BitArray\_set\_one}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_set\_one()}{BitArray\_set\_one()}}
{\footnotesize\ttfamily void Bit\+Array\+\_\+set\+\_\+one (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}



Sets the bit at the given index to 1. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in,out}}  & {\em array} & The \mbox{\hyperlink{structBitArray}{Bit\+Array}}. \\
\hline
\mbox{\texttt{ in}}  & {\em index} & The index of the bit. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{bit__array_8h_a2f5eb4a58ab7ebcff680edec5582f2b7}\label{bit__array_8h_a2f5eb4a58ab7ebcff680edec5582f2b7}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_set\_zero@{BitArray\_set\_zero}}
\index{BitArray\_set\_zero@{BitArray\_set\_zero}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_set\_zero()}{BitArray\_set\_zero()}}
{\footnotesize\ttfamily void Bit\+Array\+\_\+set\+\_\+zero (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array,  }\item[{size\+\_\+t}]{index }\end{DoxyParamCaption})}

Like Bit\+Array\+\_\+set\+\_\+one but sets the bit to 0. \mbox{\Hypertarget{bit__array_8h_a0db413990df11cb80b2893c42142f3f4}\label{bit__array_8h_a0db413990df11cb80b2893c42142f3f4}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_to\_string@{BitArray\_to\_string}}
\index{BitArray\_to\_string@{BitArray\_to\_string}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_to\_string()}{BitArray\_to\_string()}}
{\footnotesize\ttfamily char $\ast$ Bit\+Array\+\_\+to\+\_\+string (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structBitArray}{Bit\+Array}}}]{array }\end{DoxyParamCaption})}



Converts the \mbox{\hyperlink{structBitArray}{Bit\+Array}} to a string. 

The string is allocated with malloc and must be freed with free. 
\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em array} & The \mbox{\hyperlink{structBitArray}{Bit\+Array}}. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The string representation of the \mbox{\hyperlink{structBitArray}{Bit\+Array}}. 
\end{DoxyReturn}
\mbox{\Hypertarget{bit__array_8h_a6c47f74244006ff431a64e98daf3652e}\label{bit__array_8h_a6c47f74244006ff431a64e98daf3652e}} 
\index{bit\_array.h@{bit\_array.h}!BitArray\_with\_n\_bits@{BitArray\_with\_n\_bits}}
\index{BitArray\_with\_n\_bits@{BitArray\_with\_n\_bits}!bit\_array.h@{bit\_array.h}}
\doxysubsubsection{\texorpdfstring{BitArray\_with\_n\_bits()}{BitArray\_with\_n\_bits()}}
{\footnotesize\ttfamily \mbox{\hyperlink{structBitArray}{Bit\+Array}} Bit\+Array\+\_\+with\+\_\+n\+\_\+bits (\begin{DoxyParamCaption}\item[{size\+\_\+t}]{nb\+\_\+bits }\end{DoxyParamCaption})}



Creates a \mbox{\hyperlink{structBitArray}{Bit\+Array}} with the given number of bits. 

The bits are not initialized. Any call to this function should be paired with a call to Bit\+Array\+\_\+destroy, to free the memory. 
\begin{DoxyParams}[1]{Parameters}
\mbox{\texttt{ in}}  & {\em nb\+\_\+bits} & The number of bits in the array. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A \mbox{\hyperlink{structBitArray}{Bit\+Array}} with the given number of bits. 
\end{DoxyReturn}
