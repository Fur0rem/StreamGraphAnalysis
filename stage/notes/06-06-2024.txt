Pas de poids
Pas d'orientation car c'est plus simple
Temps : Continu
-> Structures d'intervalles

Structure de donnéess
-> Structures plutot statiques
-> Reflechir par le temps car faut pas parcourir tous les liens par exemple pour trouver G(t)

Format de fichiers d'entres :
t1 u v +
t2 u v -
avec le temps croissant
On suppose que les degrés, noeuds, le temps de vie du graphe est connu au début
-> Comme ça on connait la taille des données à l'avance et pas de tableaux dynamiques qui perdent de l'espace

Pour les instants de présence : [1, 3] U [3, 5] ~~ [1, 5]

On peut interdire tout de durer trop longtemps pour la localité du temps -> découper un peu notre stream
Couper en tranches/chunks

Interactif ou pas?
Interactif -> pas optimisé mais plus facile
C -> fait pour du code optimisé mais Python plus facile

Choix entre full C pour avoir tout

Intervals ouverts ou non? A voir, au feeling, quand y aura des problèmes
Timestamps en entiers ou pas? Mieux en entiers car y a pas d'erreurs de précision flottante et le fichier d'entrée est fini.

Focus sur la structure de données efficace pour la plupart des primitives

Eviter au maximum les recopies de mémoire (notamment pour les sous-streams)

Supposer un preprocessing ou pas si on a le temps
Optimiser au max pour le temps et la mémoire